version: '3.8'
services:
  kafka:
    image: wurstmeister/kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_DELETE_RETENTION_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - mi-red
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - mi-red

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"
    networks:
      - mi-red

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: oscar
      MONGO_INITDB_ROOT_PASSWORD: pass
    networks:
      - mi-red
    volumes:
      - mongo-data:/data/db
      #mysql-> /var/lib/mysql
      #postgres-> /var/lib/postgressql/data

  consumer:
    build: ./consumer
    depends_on:
      - producer
      - kafka
      - mongodb
    networks:
      - mi-red

  producer:
    build: 
      context: ./producer
      dockerfile: Dockerfile.dev
    depends_on:
      - kafka
    networks:
      - mi-red

  backend:
    build: ./backend
    depends_on:
      - consumer
      - mongodb
    ports:
      - "5000:5000"
    networks:
      - mi-red

  frontend:
    build: ./frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - mi-red

volumes:
  mongo-data:
  
networks:
  mi-red:
    driver: bridge